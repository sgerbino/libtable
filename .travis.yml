language: c

os:
  - linux
  - osx

compiler:
  - clang
  - gcc

env:
  - CMAKE_BUILD_TYPE=RELEASE
  - CMAKE_BUILD_TYPE=DEBUG

matrix:
  exclude:
    - os: osx
      compiler: gcc

before_install:
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get update -qq; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew update; fi
  
install:
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then sudo apt-get install -qq valgrind rpm autotools-dev autoconf; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then brew install valgrind autoconf automake; fi

before_script:
  - git submodule update --init --recursive
  - cmake -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}

script:
  - cmake --build . --config ${CMAKE_BUILD_TYPE}
  - ctest -D ExperimentalMemCheck

after_success:
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then cpack -G DEB -C ${CMAKE_BUILD_TYPE}; fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then cpack -G RPM -C ${CMAKE_BUILD_TYPE}; fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then cpack -G DragNDrop -C ${CMAKE_BUILD_TYPE}; fi

before_deploy:
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then export RELEASE_DEB_FILE=$(ls *.deb); fi
  - if [ "$TRAVIS_OS_NAME" = "linux" ]; then export RELEASE_RPM_FILE=$(ls *.rpm); fi
  - if [ "$TRAVIS_OS_NAME" = "osx" ]; then export RELEASE_DMG_FILE=$(ls *.dmg); fi

deploy:
  provider: releases
  api-key: "$GITHUB_TOKEN"
  file_glob: true
  file: libtable*.*
  skip_cleanup: true
  on:
    tags: true
    condition:
      - "$CMAKE_BUILD_TYPE == RELEASE"
      - "$CC == clang"
